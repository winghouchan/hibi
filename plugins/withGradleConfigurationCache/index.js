const {
  withAppBuildGradle,
  withPlugins,
  withGradleProperties,
  withSettingsGradle,
} = require('expo/config-plugins')
const annotateGeneratedCode = require('./annotateGeneratedCode')

function updateAppBuildGradle(config) {
  return withAppBuildGradle(config, (config) => {
    /**
     * Fixes violations in requirements for enabling the Gradle configuration cache
     * @see {@link https://docs.gradle.org/8.13/userguide/configuration_cache.html#config_cache:requirements}
     */
    config.modResults.contents = config.modResults.contents
      .replace(
        /([ ]*)entryFile =.*/,
        `$1${annotateGeneratedCode.begin('//')}` +
          `$1entryFile = file(\n` +
          `$1    providers.exec {\n` +
          `$1        commandLine "node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"\n` +
          `$1        workingDir rootDir\n` +
          `$1    }.standardOutput.asText.get().trim()\n` +
          `$1)\n`,
      )
      .replace(
        /([ ]*)reactNativeDir =.*/,
        `$1reactNativeDir = new File(\n` +
          `$1    providers.exec {\n` +
          `$1        commandLine "node", "--print", "require.resolve('react-native/package.json')"\n` +
          `$1        workingDir rootDir\n` +
          `$1    }.standardOutput.asText.get().trim()\n` +
          `$1).getParentFile().getAbsoluteFile()\n`,
      )
      .replace(
        /([ ]*)hermesCommand =.*/,
        `$1hermesCommand = new File(\n` +
          `$1    providers.exec {\n` +
          `$1        commandLine "node", "--print", "require.resolve('react-native/package.json')"\n` +
          `$1        workingDir rootDir\n` +
          `$1    }.standardOutput.asText.get().trim()\n` +
          `$1).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"\n`,
      )
      .replace(
        /([ ]*)codegenDir =.*/,
        `$1codegenDir = new File(\n` +
          `$1    providers.exec {\n` +
          `$1        commandLine "node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"\n` +
          `$1        workingDir rootDir\n` +
          `$1    }.standardOutput.asText.get().trim()\n` +
          `$1).getParentFile().getAbsoluteFile()`,
      )
      .replace(/enableBundleCompression.*/, `$&\n`)
      .replace(
        /([ ]*)cliFile =.*/,
        `$1cliFile = new File(\n` +
          `$1    providers.exec {\n` +
          `$1        commandLine "node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"\n` +
          `$1        workingDir rootDir\n` +
          `$1    }.standardOutput.asText.get().trim()\n` +
          `$1)\n` +
          `$1${annotateGeneratedCode.end('//')}`,
      )
      .replace(
        /^apply from: new File.*@sentry\/react-native\/package.json.*$/m,
        `${annotateGeneratedCode.begin('//')}` +
          `def sentryGradleFile = new File(\n` +
          `    providers.exec {\n` +
          `        commandLine "node", "--print", "require('path').dirname(require.resolve('@sentry/react-native/package.json'))"\n` +
          `    }.standardOutput.asText.get().trim() + "/sentry.gradle"\n` +
          `)\n` +
          `\n` +
          `apply from: sentryGradleFile\n` +
          `${annotateGeneratedCode.end('//')}`,
      )

    return config
  })
}

function updateGradleProperties(config) {
  return withGradleProperties(config, (config) => {
    /**
     * Enables the Gradle configuration cache
     * @see {@link https://docs.gradle.org/8.13/userguide/configuration_cache.html#config_cache:usage:enable}
     */
    config.modResults = config.modResults.concat([
      {
        type: 'empty',
      },
      {
        type: 'comment',
        value: `Enable configuration caching. Speeds up Gradle's configuration phase.\n# See https://docs.gradle.org/8.13/userguide/configuration_cache.html.`,
      },
      {
        type: 'property',
        key: 'org.gradle.configuration-cache',
        value: 'true',
      },
    ])

    return config
  })
}

function updateSettingsGradle(config) {
  return withSettingsGradle(config, (config) => {
    /**
     * Only run React Native / Expo autolinking in assemble tasks.
     *
     * This is required because the Gradle configuration cache hashes some files
     * generated by autolinking. If a non-assemble task performs autolinking and
     * it runs before an assemble task, it alters the input state of the config
     * phase of the assemble task. Subsequent runs of the non-assemble task would
     * then hit the configuration cache which results in autolinking not running.
     * This then causes a configuration cache miss for the assemble task as the
     * input state is different from the first run. Only running autolinking in
     * the assemble task resolves this.
     */
    config.modResults.contents = config.modResults.contents.replace(
      /extensions\.configure\(com\.facebook\.react\.ReactSettingsExtension\) { .*$\n((?:.|\n)*)}/m,
      (_, contents) =>
        `extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->\n` +
        `  if (gradle.startParameter.taskNames.any { taskName -> taskName.contains('assemble') }) {\n` +
        contents
          .split('\n')
          .map((line) => `  ${line}`)
          .join('\n') +
        `}\n` +
        `}\n`,
    )

    return config
  })
}

function withGradleConfigurationCache(config) {
  return withPlugins(config, [
    updateAppBuildGradle,
    updateGradleProperties,
    // updateSettingsGradle,
  ])
}

module.exports = withGradleConfigurationCache
