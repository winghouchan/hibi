name: ci

on:
  push:
    paths:
      - '**.jsx?'
      - '**.tsx?'
      - '**.sql'
      - package.json
      - yarn.lock
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: 👀 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Set up Node.js
        uses: ./.github/actions/set-up-node-js

      - name: 🚚 Install dependencies
        run: yarn install

      - name: 🌐 Compile message catalogs
        run: |
          yarn run build:intl:extract-template
          yarn run build:intl:compile

      - name: ✨ Run linter
        run: yarn run lint

      - name: 🧪 Run tests
        run: yarn run test

  build-android:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: 👀 Checkout
        uses: actions/checkout@v4

        # Fixes build failures due to running out of disk space
        #
        # Example error:
        #
        # > Unhandled exception. System.IO.IOException: No space left on device
      - name: 🧹 Clean up disk
        uses: ./.github/actions/clean-up-disk

      - name: ⚡️ Set up build cache
        id: build-cache
        uses: ./.github/actions/set-up-ccache

      - name: 🏗️ Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version-file: '.tool-versions'

      - name: 🏗️ Set up Node.js
        uses: ./.github/actions/set-up-node-js

      - name: 🚚 Install dependencies
        run: yarn install

      - name: 🌐 Compile message catalogs
        run: |
          yarn run build:intl:extract-template
          yarn run build:intl:compile

      - name: 👷 Build app
        run: |
          yarn run expo prebuild --platform android

          # Build the Android test APK with increased JVM memory to avoid out-of-memory errors.
          # A debug build is built because the end-to-end tests executes `run-as <identifier>`
          # in the ADB shell to write fixture data, which is only possible with debug builds.
          yarn run build:android:test:debug -Dorg.gradle.jvmargs='-Xmx4g -XX:MaxMetaspaceSize=1g'

      - name: 💾 Save app build
        uses: actions/upload-artifact@v4
        with:
          name: build-android
          path: ./android/app/build/outputs/apk/endToEndTest/debug/app-endToEndTest-debug.apk
          if-no-files-found: 'error'

      - name: 💾 Save build cache debug artifacts
        if: runner.debug
        uses: actions/upload-artifact@v4
        with:
          name: build-android-build-cache-debug-artifacts
          path: ${{ steps.build-cache.outputs.debug-directory }}

  build-ios:
    needs: [test]
    runs-on: macos-15
    steps:
      - name: 👀 Checkout
        uses: actions/checkout@v4

      - name: ⚡️ Set up build cache
        id: build-cache
        uses: ./.github/actions/set-up-ccache
        with:
          # Values from https://github.com/facebook/react-native/blob/5936f29d6ae95ebdd217f7f89d1e77ae4e6e5294/packages/react-native/scripts/xcode/ccache.conf
          depend-mode: true
          file-clone: true
          inode-cache: true
          sloppiness: clang_index_store,file_stat_matches,include_file_ctime,include_file_mtime,ivfsoverlay,pch_defines,modules,system_headers,time_macros

      - name: 🏗️ Set up Node.js
        uses: ./.github/actions/set-up-node-js

      - name: 🏗️ Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: 🚚 Install dependencies
        run: yarn install

      - name: 🌐 Compile message catalogs
        run: |
          yarn run build:intl:extract-template
          yarn run build:intl:compile

      - name: 👷 Build app
        run: |
          yarn run expo prebuild --platform ios
          yarn run build:ios:test:release

      - name: 💾 Save app build
        uses: actions/upload-artifact@v4
        with:
          name: build-ios
          path: ./ios/build/Build/Products/Test-Release-iphonesimulator/Hibi.app
          if-no-files-found: 'error'

      - name: 💾 Save build cache debug artifacts
        if: runner.debug
        uses: actions/upload-artifact@v4
        with:
          name: build-ios-build-cache-debug-artifacts
          path: ${{ steps.build-cache.outputs.debug-directory }}

  # Shard end-to-end tests to reduce the overall run time by running tests across
  # multiple runners in parallel. Also reduces the run time in re-runs as only the
  # tests in the failing shard need to be re-run as opposed to the whole suite.
  shard-tests:
    runs-on: ubuntu-latest

    outputs:
      shards: ${{ steps.shard.outputs.shards }}

    steps:
      - name: 👀 Checkout
        uses: actions/checkout@v4

      - name: ✂️ Determine shards
        id: shard
        working-directory: e2e/tests
        run: echo "shards=$(find * -type d -maxdepth 0 ! -path '*__subflows__*' | jq -Rsc 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  test-android:
    needs: ['build-android', 'shard-tests']
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      # Allow other shards to run to completion to allow for the possibility of
      # them passing, reducing the amount of shards that need to be re-run.
      fail-fast: false
      matrix:
        shard: ${{ fromJson(needs.shard-tests.outputs.shards) }}

    steps:
      - name: 👀 Checkout
        uses: actions/checkout@v4

      - name: 🧹 Clean up disk
        uses: ./.github/actions/clean-up-disk

      - name: 🏗️ Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: '.tool-versions'

      - name: 🏗️ Set up Node.js
        uses: ./.github/actions/set-up-node-js

      - name: 🏗️ Set up Maestro
        uses: ./.github/actions/set-up-maestro

      - name: 🚚 Install dependencies
        run: yarn install

      - name: 📥 Download app build
        uses: actions/download-artifact@v4
        with:
          name: build-android
          path: ./build

      - name: 🌐 Compile message catalogs
        run: |
          yarn run build:intl:extract-template
          yarn run build:intl:compile

        # Speeds up tests
        #
        # See: https://github.com/ReactiveCircus/android-emulator-runner/blob/b68ca169d637f9b4902ca0bcd9ff339a105e5518/README.md?plain=1#L13-L23
        # Hardware acceleration is available on larger (4-core runners): https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-hosted-runners/
        # 4-core runners are available for open source repositories:  https://github.blog/news-insights/product-news/github-hosted-runners-double-the-power-for-open-source/
      - name: 🏎️ Enable hardware acceleration
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: 🗄️ Start JavaScript bundle server
        env:
          EXPO_PUBLIC_TELEMETRY_DSN: http://spotlight@localhost:8969/0
        run: |
          # Start the JavaScript bundle server in the background and wait for it
          # to be ready ("waiting on" logged) before allowing the run to continue
          nohup yarn start:test > nohup.out 2>&1 & while ! test -f nohup.out; do :; done && tail -F nohup.out | grep -q 'Waiting on'

          # Generate a JavaScript bundle. Allows the app to request a bundle from
          # the cache instead of generating one from scratch. This minimises the
          # risk of test failure due to assertions timing out while waiting for
          # the bundle to load. The URL was determined by inspecting the sources
          # via the Dev Tools.
          curl 'http://localhost:8081/index.bundle?platform=android&dev=true&lazy=true&minify=false&app=co.hibi.app.test&modulesOnly=false&runModule=true&excludeSource=true&sourcePaths=url-server&transform.routerRoot=src%2Fapp&transform.reactCompiler=true&transform.engine=hermes&transform.bytecode=1&unstable_transformProfile=hermes-stable' --output /dev/null

      - name: 🧪 Run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          # Android API level 32 and increased cores, disk, heap, RAM size seems to reduce test failures due to emulator problems
          api-level: 32
          arch: x86_64
          cores: 4
          disk-size: 4096M
          heap-size: 1024M
          ram-size: 8192M
          target: default # Base Android image is faster than Android images with Google Play
          script: |
            adb install ./build/app-endToEndTest-debug.apk
            yarn run test:end-to-end ${{ matrix.shard }}

      - name: 💾 Save test artifacts
        if: cancelled() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-android-${{ matrix.shard }}
          path: ~/.maestro/tests
          retention-days: 2
          include-hidden-files: true
          if-no-files-found: 'error'

  test-ios:
    needs: ['build-ios', 'shard-tests']
    runs-on: macos-14
    timeout-minutes: 60

    # Allow job/workflow to pass even on end-to-end test failures as end-to-end
    # tests are currently experimental, due to flakiness while running in CI.
    continue-on-error: true

    strategy:
      # Allow other shards to run to completion to allow for the possibility of
      # them passing, reducing the amount of shards that need to be re-run.
      fail-fast: false

      matrix:
        shard: ${{ fromJson(needs.shard-tests.outputs.shards) }}

    steps:
      - name: 👀 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: '.tool-versions'

      - name: 🏗️ Set up Node.js
        uses: ./.github/actions/set-up-node-js

      - name: 🏗️ Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 15.0.1

      - name: 🏗️ Set up Maestro
        uses: ./.github/actions/set-up-maestro
        with:
          # Maestro versions >1.39.13 seem to have issues on iOS.
          # See https://github.com/mobile-dev-inc/Maestro/issues/2610.
          maestro-version: 1.39.13

      - name: 🚚 Install dependencies
        run: yarn install

      - name: 📥 Download app build
        uses: actions/download-artifact@v4
        with:
          name: build-ios
          path: ./build/Hibi.app

      - name: 📱 Launch iOS simulator
        id: launch-ios-simulator
        uses: ./.github/actions/launch-ios-simulator
        with:
          model: 'iPhone 15'
          os: 'iOS'
          os-version: 17.0

      - name: 📲 Install app
        run: xcrun simctl install booted ./build/Hibi.app

      - name: 🧪 Run tests
        # Allow step to automatically retry to minimise failures due to flakiness
        uses: nick-fields/retry@v3
        env:
          MAESTRO_DRIVER_STARTUP_TIMEOUT: 600000 # 10 minutes
        with:
          command: yarn run test:end-to-end ${{ matrix.shard }}
          max_attempts: 3
          timeout_minutes: 30

      - name: 💾 Save test artifacts
        if: cancelled() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-ios-${{ matrix.shard }}
          path: ~/.maestro/tests
          retention-days: 2
          include-hidden-files: true
          if-no-files-found: 'error'
