name: android

on:
  workflow_call:
    inputs:
      test-shards:
        required: true
        type: string

permissions:
  actions: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      architecture: x86_64
      artifact-name: build-android

    outputs:
      architecture: ${{ env.architecture }}
      artifact-name: ${{ env.artifact-name }}

    steps:
      - name: 👀 Checkout
        uses: actions/checkout@v4

      - name: ⚡️ Set up build cache
        id: build-cache
        uses: ./.github/actions/set-up-ccache

      - name: 🏗️ Set up Android NDK
        id: set-up-android-ndk
        uses: ./.github/actions/set-up-android-ndk

      - name: 🏗️ Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version-file: '.tool-versions'

      - name: 🏗️ Set up Node.js
        uses: ./.github/actions/set-up-node-js

      - name: 🚚 Install Node modules
        uses: ./.github/actions/install-node-modules

      - name: 🌐 Compile message catalogs
        run: |
          yarn run build:intl:extract-template
          yarn run build:intl:compile

      - name: 🧰 Prepare build
        run: yarn run expo prebuild --platform android

      # The Gradle setup action restores a cache of various Gradle files into
      # the `android/.gradle` directory. The `android` directory is generated
      # by `expo prebuild`. As a result, the Gradle setup has to happen after
      # `expo prebuild` has been run.
      - name: 🏗️ Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}

      # Built Gradle plugins need to exist to ensure a Gradle configuration
      # cache hit. The cache restores files into `node_modules` so needs can
      # only be run after Node modules have been installed/restored.
      - name: ⚡️ Set up Gradle plugins
        uses: actions/cache@v4
        with:
          key: gradle-plugins-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/*gradle-plugin/**/src') }}
          path: '**/*gradle-plugin/**/build'

      # Native dependencies need to be linked to ensure a Gradle configuration
      # cache hit. See the script file for more information.
      - name: 🔗 Link native dependencies
        run: ./.github/scripts/link-android-native-dependencies.sh

      # Build the Android test APK with the specified architecture and increased
      # JVM memory to avoid out-of-memory errors.
      #
      # A debug build is built because the end-to-end tests executes `run-as` in
      # the ADB shell to write fixture data, which is only possible with debug
      # builds.
      - name: 👷 Build app
        id: build
        run: |
          ndk_version=$(yarn run build:android:test:debug \
            :properties --property ndkVersion \
            -Dorg.gradle.jvmargs='-Xmx4g -XX:MaxMetaspaceSize=1g' \
            -PreactNativeArchitectures='${{ env.architecture }}' |
          tee >(cat >&2) |
          sed -En 's/ndkVersion: ([0-9]+\.[0-9]+\.[0-9]+)/\1/Ip')

          echo "ndk_version=$ndk_version" >> $GITHUB_OUTPUT

      - name: 💾 Save app build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact-name }}
          path: ./android/app/build/outputs/apk/endToEndTest/debug/app-endToEndTest-debug.apk
          if-no-files-found: 'error'

      - name: 💾 Save build cache debug artifacts
        if: runner.debug
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact-name }}-build-cache-debug-artifacts
          path: ${{ steps.build-cache.outputs.debug-directory }}

      - name: ⚡️ Cache Android NDK
        if: steps.set-up-android-ndk.outputs.version != steps.build.outputs.ndk_version
        uses: actions/cache/save@v4
        with:
          key: android-ndk-${{ steps.build.outputs.ndk_version }}
          path: /usr/local/lib/android/sdk/ndk/${{ steps.build.outputs.ndk_version }}*

  test:
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      app-directory: ./build
      app-name: app-endToEndTest-debug.apk
      emulator-log-location: ./emulator.log

    strategy:
      # Allow other shards to run to completion to allow for the possibility of
      # them passing, reducing the amount of shards that need to be re-run.
      fail-fast: false
      matrix:
        shard: ${{ fromJson(inputs.test-shards) }}

    steps:
      - name: 👀 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: '.tool-versions'

      - name: 🏗️ Set up Node.js
        uses: ./.github/actions/set-up-node-js

      - name: 🏗️ Set up Maestro
        uses: ./.github/actions/set-up-maestro

      - name: 🚚 Install Node modules
        uses: ./.github/actions/install-node-modules

      - name: 📥 Download app build
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: ${{ env.app-directory }}

      - name: 🌐 Compile message catalogs
        run: |
          yarn run build:intl:extract-template
          yarn run build:intl:compile

      # Speeds up tests
      - name: 🏎️ Enable hardware acceleration
        run: ./.github/scripts/enable-hardware-acceleration.sh

      - name: 🗄️ Start JavaScript bundle server
        env:
          EXPO_PUBLIC_TELEMETRY_DSN: http://spotlight@localhost:8969/0
        run: |
          # Start the JavaScript bundle server in the background and wait for it
          # to be ready ("waiting on" logged) before allowing the run to continue
          nohup yarn start:test > nohup.out 2>&1 & while ! test -f nohup.out; do :; done && tail -F nohup.out | grep -q 'Waiting on'

          # Generate a JavaScript bundle. Allows the app to request a bundle from
          # the cache instead of generating one from scratch. This minimises the
          # risk of test failure due to assertions timing out while waiting for
          # the bundle to load. The URL was determined by inspecting the sources
          # via the Dev Tools.
          curl 'http://localhost:8081/index.bundle?platform=android&dev=true&lazy=true&minify=false&app=co.hibi.app.test&modulesOnly=false&runModule=true&excludeSource=true&sourcePaths=url-server&transform.routerRoot=src%2Fapp&transform.reactCompiler=true&transform.engine=hermes&transform.bytecode=1&unstable_transformProfile=hermes-stable' --output /dev/null

      - name: 🧪 Run tests
        id: tests
        uses: ./.github/actions/launch-android-emulator
        with:
          # Android API level 32 and increased disk, heap, and RAM size seems to
          # reduce test failures due to emulator problems.
          api-level: 32
          arch: ${{ needs.build.outputs.architecture }}
          disk-size: 4096M
          heap-size: 1024M
          ram-size: 8192M

          # Base Android image is faster than Android images with Google Play
          target: default

          script: |
            adb logcat -v time > ${{ env.emulator-log-location }} &
            adb install ${{ env.app-directory }}/${{ env.app-name }}
            yarn run test:end-to-end ${{ matrix.shard }}

      - name: 💾 Save emulator logs
        if: always() && (runner.debug || steps.tests.outcome == 'failure')
        uses: actions/upload-artifact@v4
        with:
          name: test-android-${{ matrix.shard }}-emulator-logs
          path: ${{ env.emulator-log-location }}
          if-no-files-found: 'error'

      - name: 💾 Save test logs
        if: always() && (runner.debug || steps.tests.outcome == 'failure')
        uses: actions/upload-artifact@v4
        with:
          name: test-android-${{ matrix.shard }}-test-logs
          path: ~/.maestro/tests
          include-hidden-files: true
          if-no-files-found: 'error'
