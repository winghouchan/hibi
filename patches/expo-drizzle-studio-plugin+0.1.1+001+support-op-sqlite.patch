# Adds support for OP SQLite.

diff --git a/node_modules/expo-drizzle-studio-plugin/build/useDrizzleStudio.js b/node_modules/expo-drizzle-studio-plugin/build/useDrizzleStudio.js
index de7b02d..511f317 100644
--- a/node_modules/expo-drizzle-studio-plugin/build/useDrizzleStudio.js
+++ b/node_modules/expo-drizzle-studio-plugin/build/useDrizzleStudio.js
@@ -1,21 +1,43 @@
 import { useDevToolsPluginClient } from "expo/devtools";
 import { useEffect } from "react";
-export default function useDrizzleStudio(db) {
+export default function useDrizzleStudio({ driver, db }) {
     const client = useDevToolsPluginClient("expo-drizzle-studio-plugin");
-    const transferData = async (e) => {
+    
+    const transferData = async ({
+        arrayMode,
+        id,
+        params,
+        sql,
+    }) => {
+        let data = [];
+
         if (!db)
             return;
+
         try {
-            const statement = await db.prepareAsync(e.sql);
-            let executed;
-            if (e.arrayMode) {
-                executed = await statement.executeForRawResultAsync(e.params);
+            if (driver === "expo") {
+                const statement = await db.prepareAsync(sql);
+                let executed;
+                if (arrayMode) {
+                    executed = await statement.executeForRawResultAsync(params);
+                }
+                else {
+                    executed = await statement.executeAsync(params);
+                }
+                data = await executed.getAllAsync();
+            } else if (driver === "opsqlite") {
+                if (arrayMode) {
+                    data = await db.executeRaw(sql, params);
+                }
+                else {
+                    const statement = db.prepareStatement(sql);
+                    statement.bind(params);
+                    const executed = await statement.execute();
+                    data = executed.rows;
+                }
             }
-            else {
-                executed = await statement.executeAsync(e.params);
-            }
-            const data = await executed.getAllAsync();
-            client?.sendMessage(`transferData-${e.id}`, { from: "app", data });
+
+            client?.sendMessage(`transferData-${id}`, { from: "app", data });
         }
         catch (error) {
             console.error(error);
